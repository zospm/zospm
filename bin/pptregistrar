#!/bin/sh
#set -x
InvalidOption=1
TooFewParms=2
TooFewEnableParms=3
UnknownAction=4

#
# Temporary hack - replace with a proper message file
#
msg() {
       	pgm=$1
	msgnum=$2
	msgtype=$3

	shift 3
	args=$*

	case ${msgnum} in
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected at least 3 but received: ";;
		${TooFewEnableParms}) msgtext="Too few parameters specified. Expected 4 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZPM000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
pptregistrar [-vd] <swname> enable|disable <ppt-entry-text>

Examples:
	Enable PPT entry for program ZWESIS01 as KEY(4) NOSWAP
		pptregistrar zwe1b0 enable \"PPT PGMNAME(ZWESIS01) KEY(4) NOSWAP\"
	Disable PPT specification for ZWESIS01
        	pptregistrar zwe1b0 disable 
Note:
	The PDS \${ZOSPM_TGT_HLQ}PARMLIB is created if it does not already exist
	The PDS member SCHED\${ZOSPM_PARMLIB_SFX} is created if it does not already exist
	The PDS member will have the new PPT entries added if 'enable' is specified
	The PDS member will have the PPT entries removed if 'disable' is specified.
	Enabling a product that already has an entry is an error.
	Disabling a product that does not have an entry is silent.
	Disabling a product removes the entry from the file - it does NOT mark as DISABLED
" >&2
     	exit 8
}

opts=""         	
while getopts ":vdf" opt; do
  case ${opt} in
    d )   	
      debug=1
      opts="${opts} -d" 
      ;;                        
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)         
      if [ ${OPTARG} != "?" ]; then
        msg pptregistrar ${InvalidOption} E "${OPTARG}"
      fi                
      syntax
      exit 4
      ;;        
  esac  	
done    	
shift $(expr $OPTIND - 1 )
if [ $# -lt 3 ]; then
        msg pptregistrar ${TooFewParms} E "$#"
 	syntax
        exit 8
fi  

. zospmsetenv 

sw=$(echo $1 | tr '[:lower:]' '[:upper:]');
verb=$(echo $2 | tr '[:lower:]' '[:upper:]');
text=$3

pfx="/*"
sfx="*/"
header="${pfx} --- ${sw} SCHED start --- ${sfx}"
footer="${pfx} --- ${sw} SCHED end   --- ${sfx}"

parmlibds="${ZOSPM_TGT_HLQ}PARMLIB"
member="SCHED${ZOSPM_PARMLIB_SFX}"

parmlibAddDataset "${parmlibds}"
rc=$?
if [ $rc -gt 0 ]; then
	echo "schedregistrari: unable to add ${parmlibds} to PARMLIB concatenation" >&2
	exit $rc
fi

registrar "${sw}" "${verb}" "${parmlibds}" "${member}" "${header}" "${footer}" "${pfx}" "${sfx}" "${text}"
rc=$?
if [ $rc -gt 0 ]; then
	echo "schedregistrar failed for ${text}" >&2
	exit $rc
fi
opercmd "SET SCH=${ZOSPM_PARMLIB_SFX}"
rc=$?
if [ $rc -gt 0 ]; then
	echo "schedregistrar: unable to dynamically update ${parmlibds}(${member}) with SET SCH" >&2
	exit $rc
fi
exit 0
