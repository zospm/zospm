#!/bin/sh
#set -x
InvalidOption=1
TooFewParms=2
TooFewEnableParms=3
UnknownAction=4

#
# Temporary hack - replace with a proper message file
#
msg() {
       	pgm=$1
	msgnum=$2
	msgtype=$3

	shift 3
	args=$*

	case ${msgnum} in
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected at least 3 but received: ";;
		${TooFewEnableParms}) msgtext="Too few parameters specified. Expected 4 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZPM000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
procregistrar [-vd] <swname> enable|disable <member> [<enablement text>]

Examples:
	Enable EQAE20 proc DBGMGR with enablement text \"//DBGMGR PROC PRM=,...//*\"
		procregistrar eqae20 enable dbgmgr \"//DBGMGR PROC PRM=,...//*\"
	Disable EQAE20 proc DBGMGR
        	procregistrar eqae20 disable dbgmgr
Note:
	The PDS \${ZOSPM_ROOT}PROCLIB is created if it does not already exist
	The PDS member will have the new PROC written with a header/trailer comment
	The PDS member will have the PROC removed if it is disabled
	Enabling a member that already has an entry is an error.
	Disabling a member that does not have an entry is silent.
	Disabling a member removes the JCL but does not delete the member
" >&2
     	exit 8
}
	
opts=""         	
while getopts ":vdf" opt; do
  case ${opt} in
    d )   	
      debug=1
      opts="${opts} -d" 
      ;;                        
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)         
      if [ ${OPTARG} != "?" ]; then
        msg procregistrar ${InvalidOption} E "${OPTARG}"
      fi                
      syntax
      exit 4
      ;;        
  esac  	
done    	
shift $(expr $OPTIND - 1 )
if [ $# -lt 3 ]; then
        msg procregistrar ${TooFewParms} E "$#"
 	syntax
        exit 8
fi  
sw=$(echo $1 | tr '[:lower:]' '[:upper:]');
verb=$(echo $2 | tr '[:lower:]' '[:upper:]');
member=$(echo $3 | tr '[:lower:]' '[:upper:]');
text="$4"

pfx="//*"
sfx="*"
header="${pfx} --- ${sw} start --- ${sfx}"
footer="${pfx} --- ${sw} end   --- ${sfx}"

. zospmsetenv

procds="${ZOSPM_TGT_HLQ}PROCLIB"
activeprocnum=`opercmd '$djobclass(stc),proclib' 2>/dev/null | grep HASP837 | awk -F'=' '{ print $2  }'`
if [ $? -gt 0 ]; then
	echo "Unable to determine started task class's proclib" >&2
	exit 16
fi
activeproclib="PROC${activeprocnum}"
opercmd '$del proclib(zospmpr)' >/dev/null 2>&1
result=`opercmd "\\$D proclib(${activeproclib})" 2>/dev/null`
if [ $? -gt 0 ]; then
	echo "Unable to get dataset list for PROCLIB(${activeproclib})" >&2
	exit 16
fi
datasets=`echo "${result}" | grep HASP319 | awk -F'[\(\)=,]' '{ if (NF==7) { print $6 } else if (NF==9) { print $8; } }'`

# Remove any earlier instances of procds in the concatenation
orig="${datasets}"
datasets=""
for dataset in ${orig}; do
	if [ "${dataset}" != "${procds}" ]; then
		datasets="${datasets} ${dataset}"
	fi
done
if [ "${verb}" = "ENABLE" ]; then
	datasets="${procds} ${datasets}"
fi	
first=true
for dataset in ${datasets}; do
	if "${first}" ; then 
		result=`opercmd "\\$ADD proclib(zospmpr),dd(01)=dsn=${dataset}" 2>/dev/null`
		first=false
	else
		result=`opercmd "\\$T proclib(zospmpr),dd(99)=dsn=${dataset}" 2>/dev/null`
	fi
done

result=`opercmd "\\$T proclib(zospmpr),name=${activeproclib}" 2>/dev/null`
opercmd '$del proclib(zospmpr)' >/dev/null 2>&1
registrar "${sw}" "${verb}" "${procds}" "${member}" "${header}" "${footer}" "${pfx}" "${sfx}" "${text}"
exit $?
