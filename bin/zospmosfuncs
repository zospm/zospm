#
# gets called by zospmexternalfuncs
#

issueTSO() {
	cmd=$1
	tmpout="${ZOSPM_TMP}/$$tso.out"
	tsocmd "${cmd}" >$tmpout 2>/dev/null
	rc=$?
	if [ $rc -gt 0 ]; then
		cat "${tmpout}" >&2
	fi
	rm -f "${tmpout}"
	return $rc
}

# needs refactor in the future
undefinedProperty() {
	val=$1
	if [ "${val}" = "" ] || [ "${val}" = "NONE" ]; then
		echo true
	else
		echo false
	fi
}
# needs refactor in the future
definedProperty() {
	negate=`undefinedProperty "$1"`
	if ${negate}; then
		echo false;
	else
		echo true
	fi
}

chkProperties() {
	properties=$*
	rc=0
	for property in ${properties}; do
		eval "val=\${$property}" 
		if `undefinedProperty "${val}"`; then 
			echo "Property \$${property} is undefined but is required" >&2
			rc=4
		fi
	done
	return $rc
}

parmlibAddOrRemoveDataset() {
	pverb="$1"
	ds="$2"
	parmlib=`pparm 2>/dev/null`
	if [ $? -gt 0 ]; then
		return $?
	fi
	if [ "${pverb}" = "ADD" ]; then
		parmlib="${ds}
${parmlib}"
	fi
	newparmlibhfs=/tmp/parmlib.$$.txt
	newparmlibds=`mvstmp`
	dtouch "${newparmlibds}"
	if [ $? -gt 0 ]; then
		return $?
	fi
	for libds in $parmlib; do 
		if [ "${pverb}" = "REMOVE" ] && [ "${libds}" = "${ds}" ]; then
			continue;
		fi
		if [ "${libds}" = "SYS1.PARMLIB" ]; then
			# SETLOAD will append SYS1.PARMLIB automatically
			continue;
		fi
		dls -l "$libds" | awk ' { printf("%-8s %-44s %6s\n","PARMLIB", $1, $5); }' >>"${newparmlibhfs}"
		if [ $? -gt 0 ]; then
			return $?
		fi
	done
	#a2e "${newparmlibhfs}"
	#if [ $? -gt 0 ]; then
	#	return $?
	#fi
	dcp "${newparmlibhfs}" "${newparmlibds}(LOAD@@)"	
	if [ $? -gt 0 ]; then
		return $?
	fi
	rm "${newparmlibhfs}"

	opercmd "SETLOAD @@,PARMLIB,DSN=${newparmlibds}" 2>/dev/null >/dev/null
	if [ $? -gt 0 ]; then
		echo "Unable to update parmlib. Temporary dataset: ${newparmlibds} retained" >&2
		return $?
	fi
	drm "${newparmlibds}"
	return 0 	
}

parmlibRemoveDataset() {
	parmdataset=$(echo $1 | tr '[:lower:]' '[:upper:]');
	parmlibAddOrRemoveDataset "REMOVE" "${parmdataset}"
	return $?
}

parmlibAddDataset() {
	parmdataset=$(echo $1 | tr '[:lower:]' '[:upper:]');
	parmlibAddOrRemoveDataset "ADD" "${parmdataset}"
	return $?
}

curllname() {
	opout="${ZOSPM_TMP}/curllname.$$.out"
	llaresults=`opercmd 'D LLA' 2>${opout}`
	llaerr=`cat "${opout}"`
	rm -f "${opout}"

	lladatasets=`echo "$llaresults" | awk 'BEGIN { header=0; } { if (header) { print substr($0,60,44) } } / ENTRY/ {header=1}'`
	if [ $? -gt 0 ]; then
		echo "${laerr}" >&2
		return $?
	fi
	curllname=`echo "$llaresults" | grep 'LNKLST SET' | awk ' { print $3; }'`
	if [ $? -gt 0 ]; then
		echo "${laerr}" >&2
		return $?
	fi
	echo "${curllname}"
	return 0
}

nextllname() {
	cur="$1"
	pfx="$2"

	if [ "${pfx}" = '' ]; then
		echo "Syntax: nextllname <cur> <pfx>" >&2
		exit 16
	fi
	num=${cur#${pfx}*}
	if [ "${num}" = "${cur}" ]; then
		echo "${pfx}1"
	else
            	if `isinteger ${num}`; then
                        next=`expr $num + 1`
                        echo "${pfx}${next}"
		else
                    	echo "${pfx}1"
		fi
	fi
}

llnameUndefined() {
	name="$1"

	opercmd "D PROG,LNKLST,NAME=${name}" 2>/dev/null | grep -q CSV480I
	if [ $? -eq 0 ]; then
		echo true
	else
		echo false
	fi
}

llaAddOrRemoveDatasets() {
	#set -x
	lverb=$(echo $1 | tr '[:lower:]' '[:upper:]');
	shift
	datasets=$(echo $* | tr '[:lower:]' '[:upper:]');

	if [ "${datasets}" = '' ]; then
		echo "Syntax: llaAddOrRemoveDatasets ADD|REMOVE [<dataset>]+" >&2
		exit 16
	fi

	TMPCSV=`mvstmp`

	dtouch "${TMPCSV}"
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "Unable to allocate temporary dataset ${TMPCSV}" >&2
		return $rc
	fi

	curllname=`curllname`
	while true ; do
		nextllname=`nextllname "${curllname}" "ZOSPM"`
		if `llnameUndefined "${nextllname}"` ; then	
			break;
		fi
		curllname="${nextllname}"
	done

	opout="${ZOSPM_TMP}/llaAddRemoveDatasets.$$.out"
	rm -f "${opout}"

	opercmd "SETPROG LNKLST DEFINE NAME(${nextllname}) COPYFROM(CURRENT)" >>${opout} 2>&1
	if [ "${lverb}" = "ADD" ]; then
		for dataset in ${datasets}; do
			opercmd "SETPROG LNKLST ADD NAME(${nextllname}) DSNAME(${dataset})" >>${opout} 2>&1
		done
	elif [ "${lverb}" = "REMOVE" ]; then
		for dataset in ${datasets}; do
			opercmd "SETPROG LNKLST DELETE NAME(${nextllname}) DSNAME(${dataset})" >>${opout} 2>&1
		done
	else
		echo "VERB must be ADD or REMOVE. ${lverb} specified." >&2
		return 8
	fi
	opercmd "SETPROG LNKLST ACTIVATE NAME(${nextllname})" >>${opout} 2>&1
	llerr=`cat "${opout}"`
	rm -f "${opout}"

	if [ "${lverb}" = "REMOVE" ]; then
		parmlibAddDataset "${TMPCSV}"
		rc=$?
		if [ $rc -gt 0 ]; then
			echo "Unable to update parmlib to add dataset ${TMPCSV}" >&2
			echo "${llerr}" >&2
			return $rc
		fi
		decho "/* Remove a set of Datasets */" "${TMPCSV}(CSVLLA@@)"
		for dataset in ${datasets}; do
			decho -a "REMOVE(${dataset})" "${TMPCSV}(CSVLLA@@)"
		done
		rc=$?
		if [ $rc -gt 0 ]; then
			echo "Unable to update temporary member CSVLLA@@ in dataset ${TMPCSV}" >&2
			return $rc
		fi

		opercmd "MODIFY LLA,UPDATE=@@" >>${opout} 2>&1
		opercmd "SETPROG LNKLST UNALLOCATE" >>${opout} 2>&1
		opercmd "SETPROG LNKLST ALLOCATE" >>${opout} 2>&1
		llerr=`cat "${opout}"`
		rm -f "${opout}"

		parmlibRemoveDataset "${TMPCSV}"
		rc=$?
		if [ $rc -gt 0 ]; then
			echo "Unable to update parmlib to remove dataset ${TMPCSV}" >&2
			echo "${llerr}" >&2
			return $rc
		fi
	fi
	return 0
}

llaRemoveDatasets() {
	llaAddOrRemoveDatasets "REMOVE" "$1"
        return $?
}

llaAddDatasets() {
	llaAddOrRemoveDatasets "ADD" "$1"
        return $?
}
