#!/bin/sh
#set -x
InvalidOption=1
TooFewParms=2
TooFewEnableParms=3
UnknownAction=4

#
# Temporary hack - replace with a proper message file
#
msg() {
       	pgm=$1
	msgnum=$2
	msgtype=$3

	shift 3
	args=$*

	case ${msgnum} in
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected at least 3 but received: ";;
		${TooFewEnableParms}) msgtext="Too few parameters specified. Expected 4 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZPM000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
apfregistrar [-vd] <swname> enable|disable [dataset]+

Examples:
	Enable APF authorization for dataset ZOSPM.EQAE20.SEQAAUTH
		apfregistrar eqae20 enable zospm.eqae20.seqaauth
	Disable APF authorization for EQAE20 datasets
        	apfregistrar eqae20 disable 5737-I22
Note:
	The PDS \${ZOSPM_TGT_HLQ}PARMLIB is created if it does not already exist
	The PDS member PROG\${ZOSPM_PARMLIB_SFX} is created if it does not already exist
	The PDS member will have the new APF authorized datasets added if 'enable' is specified
	The PDS member will have the APF authorized datasets removed if 'disable' is specified.
	Enabling a product that already has an entry is an error.
	Disabling a product that does not have an entry is silent.
	Disabling a product removes the entry from the file - it does NOT mark as DISABLED
" >&2
     	exit 8
}

opts=""         	
while getopts ":vdf" opt; do
  case ${opt} in
    d )   	
      debug=1
      opts="${opts} -d" 
      ;;                        
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)         
      if [ ${OPTARG} != "?" ]; then
        msg apfregistrar ${InvalidOption} E "${OPTARG}"
      fi                
      syntax
      exit 4
      ;;        
  esac  	
done    	
shift $(expr $OPTIND - 1 )
if [ $# -lt 3 ]; then
        msg apfregistrar ${TooFewParms} E "$#"
 	syntax
        exit 8
fi  

. zospmsetenv 

sw=$(echo $1 | tr '[:lower:]' '[:upper:]');
verb=$(echo $2 | tr '[:lower:]' '[:upper:]');
if [ "${verb}" = "CONFIG" ]; then
	verb="ENABLE"
fi
if [ "${verb}" = "DECONFIG" ]; then
	verb="DISABLE"
fi
shift 2
datasets=$*

pfx="/*"
sfx="*/"
header="${pfx} --- ${sw} APF start --- ${sfx}"
footer="${pfx} --- ${sw} APF end   --- ${sfx}"

parmlibds="${ZOSPM_TGT_HLQ}PARMLIB"
member="PROG${ZOSPM_PARMLIB_SFX}"

datasets=$(echo $datasets | tr '[:lower:]' '[:upper:]');
for dataset in ${datasets}; do
	dataset=$(echo $dataset | tr '[:lower:]' '[:upper:]');
	dls -l ${dataset} >/dev/null 2>/dev/null
	if [ $? -gt 0 ]; then
		echo "apfregistrar: Dataset: ${dataset} not found." >&2
		exit 16
	fi
done

for dataset in ${datasets}; do
	info=`dls -l ${dataset}`
	volume=`echo "${info}" | awk '{ print $5; }'`
	opercmd "d sms,volume(${volume})" 2>/dev/null | grep "NOT AN SMS MANAGED DASD VOLUME"
	if [ $? -gt 0 ]; then
		volume="SMS"
		setstr="SMS"
	else
		setstr="VOLUME=${volume}"
	fi

	if [ "${verb}" = ENABLE ]; then
		op="ADD"
	else
		op="DELETE"
	fi
	entry="APF ${op} DSNAME(${dataset}) ${volume}"
	if [ "${text}" = "" ]; then
		text="${entry}"
	else
		text="${entry}
${text}"
	fi
	opercmd "SETPROG APF,${op},DSNAME=${dataset},${setstr}" >/dev/null 2>&1
	if [ $? -gt 0 ]; then
		echo "apfregistrar: Unable to APF authorize ${dataset}" >&2
		exit 16
	fi
done

registrar "${sw}" "${verb}" "${parmlibds}" "${member}" "${header}" "${footer}" "${pfx}" "${sfx}" "${text}"
exit $?
