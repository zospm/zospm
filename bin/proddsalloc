#!/bin/sh
#set -x

InvalidOption=1
TooFewParms=2
UnknownAction=3
PrefixTooLong=4

#
# Temporary hack - replace with a proper message file
#
msg() {
        pgm=$1
        msgnum=$2
        msgtype=$3

        shift 3
        args=$*

        case ${msgnum} in
                ${InvalidOption}) msgtext="Invalid option specified: -";;
                ${TooFewParms}) msgtext="Too few Parameters specified. Expected 2 but received: ";;
                ${UnknownAction}) msgtext="Unknown action specified: ";;
                ${PrefixTooLong}) msgtext="Prefix must be 6 characters or less. Received: ";;
                *) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
        esac
        echo "ZPM000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}


crtds() {
	echo "$1" | awk '{ ds=$1; $1=""; attrs=$0; if (ds != "") { rc=system("dtouch " attrs " " ds); if (rc > 0) { exit(rc); } } }'
	return $?
}

crtzfs() {
	zfsname="$1"
	primary="$2"
	secondary="$3"
	mountpnt="$4"
	leaves="$5"
	mkdir -p -m 755 ${root}${mountpnt}
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "Error creating ${root}${mountpnt} ZFS directory RC: $rc" >&2
		return $rc
	fi

	cmdout="${ZOSPM_TMP}/cmd.out"
	touch "${cmdout}"

	mvscmdauth --pgm=IDCAMS --sysprint="${cmdout}" --sysin=stdin <<zzz
  DEFINE CLUSTER(NAME(${zfsname}) -
  LINEAR TRACKS(${primary} ${secondary}) SHAREOPTIONS(3))
zzz
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "Error creating ZFS Linear Cluster:  $rc" >&2
		cat "${cmdout}" >&2
		return $rc
	fi
	mvscmdauth --pgm=IOEAGFMT --args="-aggregate ${zfsname} -compat" --sysprint="${cmdout}"
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "Error formatting ZFS: $rc" >&2
		cat "${cmdout}" >&2
		return $rc
	fi
	rm -f "${cmdout}"

	/usr/sbin/mount -t zfs -f ${zfsname} ${root}${mountpnt}
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "Error mounting ZFS:  $rc" >&2
		return $rc
	fi

	OLDIFS=$IFS
	IFS=','
	rc=0
	for mkleaf in $leaves; do
		mkdir -p -m 755 ${root}${mountpnt}${mkleaf}
		rc=$?
		if [ $rc -gt 0 ]; then
			echo "Error creating ${root}${mountpnt}${mkleaf} ZFS directory leaves RC: $rc" >&2
			break
		fi
	done
	IFS=$OLDIFS
	return $rc
}

while getopts ":vdf" opt; do
  case ${opt} in
    d )
      debug=1
      ;;
    v )
      verbose=1
      opts="-v"
      ;;
    \?)
      if [ ${OPTARG} != "?" ]; then
        msg smpconfig ${InvalidOption} E "${OPTARG}"
      fi
      syntax
      exit 4
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -lt 1 ]; then
        msg smpconfig ${TooFewParms} E "$#"
        syntax
        exit 16
fi

. zospmsetenv
sw=$1
ussname=$(echo ${sw} | tr '[:upper:]' '[:lower:]');
zosname=$(echo ${sw} | tr '[:lower:]' '[:upper:]');
prefix=`echo "${ussname}" | awk '{ print substr($1, 0, 3) }'`

smpelibs="${ZOSPM_REPOROOT}/zospm-${prefix}/${ussname}/${ussname}bom.json"
ussname=$(echo ${ussname} | tr '[:lower:]' '[:upper:]')

libs=`readbom ${ussname} <${smpelibs}`
rc=$?     
if [ $rc -gt 0 ]; then
	echo "proddsalloc: Unable to read bom: ${smpelibs}" >&2
	exit $rc
fi

# Obtain list of all Target and Distribution Datasets to allocate, exclude ZFS
pdslist=`echo "${libs}" | awk -v pfx="${ZOSPM_SRC_HLQ}${ussname}." '($2 == "PDS") {print pfx$1" -t"$2" -r"$3" -l"$4" -b"$8" -s"$5*56"K"}'`
zfslist=`echo "${libs}" | awk -v pfx="${ZOSPM_SRC_HLQ}${ussname}." '($2 == "ZFS") {print pfx$1" "$3" "$4" "$7" "$8}'`
othlist=`echo "${libs}" | awk -v pfx="${ZOSPM_SRC_HLQ}${ussname}." '($2 != "C" && $2 != "ZFS" && $2 != "PDS") {print pfx$1" -t"$2" -r"$3" -l"$4" -s"$5*56"K"}'`

crtds "${pdslist}"
rc=$?
if [ $rc -gt 0 ]; then
	echo "PDS Dataset creation failed. Installation aborted">&2
	exit $rc
fi

crtds "${othlist}"
rc=$?
if [ $rc -gt 0 ]; then
        echo "Dataset creation failed. Installation aborted">&2
        exit $rc
fi

root="${ZOSPM_SRC_ZFSROOT}"
echo "${zfslist}" | while read -r zfs; do
	crtzfs ${zfs}
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "ZFS creation/mount failed. Installation aborted" >&2
		exit $rc
	fi
done

exit 0
