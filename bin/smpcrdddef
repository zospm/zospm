#!/bin/sh
#set -x

InvalidOption=1
TooFewParms=2
UnknownAction=3
PrefixTooLong=4

#
# Temporary hack - replace with a proper message file
#
msg() {
        pgm=$1
        msgnum=$2
        msgtype=$3

        shift 3
        args=$*

        case ${msgnum} in
                ${InvalidOption}) msgtext="Invalid option specified: -";;
                ${TooFewParms}) msgtext="Too few Parameters specified. Expected 2 but received: ";;
                ${UnknownAction}) msgtext="Unknown action specified: ";;
                ${PrefixTooLong}) msgtext="Prefix must be 6 characters or less. Received: ";;
                *) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
        esac
        echo "ZPM000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}



#for All but ZFS libraries
targ_dddefs(){
libs=`readbom ${ussname} <${smpelibs}`
rc=$?
if [ $rc -gt 0 ]; then
  exit $rc
fi

targdddefs=`echo "${libs}" | awk '($2 != "ZFS" && $7 == "T") {print $1}'` 
for targdddef in ${targdddefs}; do
 smpuclin="${smpuclin}
 REP DDDEF(${targdddef})
 DA(${ZOSPM_SRC_HLQ}${child_zosname}.${targdddef})
 UNIT(SYSALLDA)
 WAITFORDSN
 SHR.
"
done

#for ZFS 
targdddefs=`echo "${libs}" | awk '($2 == "ZFS" && $5 == "T") {print $1","$6}'`
for targddzfs in ${targdddefs}; do
 targdddef=`echo "${targddzfs}" | awk -F, '{print $1}'`
 dddefs=`echo "${targddzfs}" | awk -F, '{print $2}' | tr ';' ' '`
 for dddef in ${dddefs}; do
   dd=${dddef%%:*}                                                              
   path=${dddef##*:}
   if [ "${dd}" = "${path}" ]; then 
     dd="${targdddef}"
   fi
 smpuclin="${smpuclin}
   REP DDDEF(${dd})
   PATH('${ZOSPM_SRC_ZFSROOT}${path}').
"
 done   
done


#for CALLLIBS 
targdddefs=`echo "${libs}" | awk '($2 == "C") {print $1}'`
for targdddef in ${targdddefs}; do
  llq=`echo ${targdddef} | awk -F'.' '{print $2}'`
  chlq=`echo ${targdddef} | awk -F'.' '{print $1}'`
  eval shlq=${chlq}
  smpuclin="${smpuclin}
  REP DDDEF(${llq})
  DA(${shlq}"."${llq})
  UNIT(SYSALLDA)
  WAITFORDSN
  SHR.
"
done
}

dist_dddefs(){
distdddefs=`echo "${libs}" | awk '($7 == "D") {print $1}'`
for distdddef in ${distdddefs};do
 smpuclin="${smpuclin}
 REP DDDEF(${distdddef})
 DA(${ZOSPM_SRC_HLQ}${child_zosname}.${distdddef})
 UNIT(SYSALLDA)
 WAITFORDSN
 SHR.
"

done
}


run_gimsmp(){

smpout=`smp -i "${ZOSPM_SRC_HLQ}${zosname}G.GLOBAL.CSI" <<zzz
${smpuclin}
zzz
`
        rc=$?
        if [ $rc -gt 4 ]; then
		echo "GIMSMP failed with rc:$rc" >&2
		echo "Input:" >&2
		echo "${smpuclin}" >&2
		echo "Output:" >&2
		echo "${smpout}" >&2
                exit $rc
        fi


}

while getopts ":vdf" opt; do
  case ${opt} in
    d )
      debug=1
      ;;
    v )
      verbose=1
      opts="-v"
      ;;
    \?)
      if [ ${OPTARG} != "?" ]; then
        msg smpconfig ${InvalidOption} E "${OPTARG}"
      fi
      syntax
      exit 4
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -lt 1 ]; then
        msg smpconfig ${TooFewParms} E "$#"
        syntax
        exit 16
fi

. zospmsetenv

sw=$1
ussname=$(echo ${sw} | tr '[:upper:]' '[:lower:]');
child_zosname=$(echo ${sw} | tr '[:lower:]' '[:upper:]');
zosname=$(echo ${sw} | tr '[:lower:]' '[:upper:]');
prefix=`echo "${ussname}" | awk '{ print substr($1, 0, 3) }'`

smpelibs="${ZOSPM_REPOROOT}/zospm-${prefix}/${ussname}/${ussname}bom.json"
swparent=`readparent ${ussname} <${smpelibs}`
rc=$?
if [ $rc -gt 0 ]; then
        echo "${swparent}"
        exit $rc
fi
if [ "${swparent}" != "0" ]; then
        zosname="${swparent}"
fi

# Update Target Zone DDDEFS, note Target Zone contains both Targ/Dist libraries
smpuclin="  SET   BDY(${zosname}T).
     UCLIN.
"
targ_dddefs
dist_dddefs

 
smpuclin="${smpuclin} 
     ENDUCL."
run_gimsmp



# Update Distribution Zone DDDEFS
smpuclin="  SET BDY(${zosname}D).
     UCLIN.
"
dist_dddefs
smpuclin="${smpuclin}
     ENDUCL."
run_gimsmp


exit 0
