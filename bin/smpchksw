#!/bin/sh

InvalidOption=1
TooFewParms=2
UnknownAction=3

#
# Temporary hack - replace with a proper message file
#
msg() {
	pgm=$1
	msgnum=$2
	msgtype=$3
	
	shift 3
	args=$*

	case ${msgnum} in 
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected at least 2 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZPM000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
smpchksw [-vd] <csi> <fmid> <ptf list>
	    
Examples:
	Check that the PTFs UK47103 and UK59311 for the High Level assembler V1.6 are installed
	smpchksw \${HMQ_CSI} HMQ4160 UK47103 UK59311 
" >&2 
	exit 16
}

chkfmid() {
	csi="${1}"
	tgtzone="${2}"
	fmid="${3}"

	tmpCntlHFS=${ZOSPM_TMP}/$$.${tgtzone}.fmidcntl.xml
	ptflist=${ZOSPM_TMP}/$$.${tgtzone}.fmidsmp.ptflst
	touch ${ptflist}

	if [ ${verbose} -gt 0 ]; then
		echo "Checking target zone: ${tgtzone}" >&2
	fi

	echo "  SET BOUNDARY(${tgtzone})." >${tmpCntlHFS}
	echo "  LIST SYSMOD FUNCTIONS." >>${tmpCntlHFS}

	smpout=`smp ${opts} -i ${csi} -l ${ptflist} <${tmpCntlHFS}`
	rc=$?
	if [ ${rc} -gt 4 ]; then
		if [ ${verbose} -gt 0 ]; then
 			echo "Warning: Unable to determine SYSMOD FUNCTION list for target zone ${tgtzone}." >&2
		fi
		return 4
	else
		allfmids=`awk '{ if (NF==4 && $2=="TYPE" && $3=="=" && $4=="FUNCTION") { print($1); } }' < ${ptflist}`
		if [ ${debug} -eq 0 ]; then
			rm ${tmpCntlHFS}
			rm ${ptflist}
		fi
		if [ "${allfmids}" = '' ]; then
			if [ ${verbose} -gt 0 ]; then
				echo "No FMIDs in target zone: ${tgtzone}" >&2
			fi
			return 4
		else 
			case ${allfmids} in
				*${fmid}* ) 
					if [ ${verbose} -gt 0 ]; then
						echo "FMID ${fmid} found in target zone: ${tgtzone}" >&2
					fi
					return 0 
					;;
				* ) 
					if [ ${verbose} -gt 0 ]; then
						echo "FMID ${fmid} not in target zone: ${tgtzone}" >&2
					fi
					return 4
					;;
			esac
		fi
	fi	
} 

chkptfs() {
	csi="${1}"
	tgtzone="${2}"
	fmid="${3}"
	shift 3
	ptfs="${*}"
	requiredptfs="${ptfs}"

	tmpCntlHFS=${ZOSPM_TMP}/$$.$tgtzone.cntl.xml
	ptflist=${ZOSPM_TMP}/$$.$tgtzone.smp.ptflst

	echo "  SET BOUNDARY(${tgtzone})." >${tmpCntlHFS}
	echo "  LIST SYSMODS(" >>${tmpCntlHFS}
	for ptf in ${requiredptfs}; do
		echo "    ${ptf}" >>${tmpCntlHFS}
	done
        echo "  ) FORFMID(${fmid})." >>${tmpCntlHFS}
	
	smpout=`smp ${opts} -i ${csi} -l ${ptflist} <${tmpCntlHFS}`
	rc=$?
	if [ ${rc} -gt 4 ]; then
		echo "Warning: Unable to determine PTF list for target zone ${tgtzone}." >&2
		return ${rc}
	fi

	if [ "${ptfs}" = "" ]; then
		return 0
	fi

	missingptfs=''
	allptfs=`awk ' { if (NF == 4 && $2 == "TYPE" && $3 == "=" && ($4 == "PTF" || $4 == "SUPERSEDED" || $4 == "FUNCTION")) { print $1; }}' <$ptflist `
	for requiredptf in ${requiredptfs}; do
		case ${allptfs} in
			*${requiredptf}* )
			if [ ${verbose} -gt 0 ]; then
				echo "PTF ${requiredptf} found in target zone: ${tgtzone}" >&2
			fi
			;;
		* )     
			if [ ${verbose} -gt 0 ]; then
				echo "PTF ${requiredptf} not found in target zone: ${tgtzone}" >&2
			fi
			if [ "${missingptfs}" = '' ]; then
				missingptfs="${requiredptf}"
			else
				missingptfs="${missingptfs} ${requiredptf}"
			fi
			;;
		esac
	done

	if [ ${verbose} -gt 0 ]; then
		if [ "${missingptfs}" != '' ]; then
			echo "PTFs ${missingptfs} not found in tgtzone ${tgtzone}, fmid ${fmid}" >&2
		fi
	fi
	if [ ${debug} -eq 0 ]; then
		rm ${tmpCntlHFS}
		rm ${ptflist}
	fi
	echo "${missingptfs}"
	if [ "${missingptfs}" = '' ]; then
		return 0
	else
		return 4
	fi
}

runchk() {
#set -x
	csi="$1"
	fmid="$2"
	shift 2
	ptfs="$*"
	reqptfs="${ptfs}"
	if [ "${reqptfs}" = "" ]; then
		echo "No PTFs to check" >&2
		return 0
	fi
	tmpCntlHFS=${ZOSPM_TMP}/$$.gzone.cntl.xml
	gzonelist=${ZOSPM_TMP}/$$.gzone.smp.gzonelst
	touch ${gzonelist}

	echo "  SET BOUNDARY(GLOBAL).
  LIST GZONE.
" >${tmpCntlHFS}
	if [ ${verbose} = "1" ]; then 
		echo "getting gzone entries for: ${csi}" >&2; 
	fi
	smpout=`smp ${opts} -i ${csi} -l ${gzonelist} <${tmpCntlHFS}`
	rc=$?
 	if [ ${rc} -gt 0 ]; then
                echo "Unable to determine global zone for: ${csi}." >&2
		echo "${smpout}" >&2
		return ${rc}
       	fi
	tgtzones=`awk '{ if (NF==3 && $2=="TARGET") { print($1); } }' < ${gzonelist}`
	if [ "${tgtzones}" = '' ]; then
		echo "Internal error. Unable to	determine global zone for: ${csi}. See ${gzonelist} for details." >&2
		return 16
	fi

	missingptfs="${reqptfs}"
	minrc=12
	for tgtzone in $tgtzones; do
		out=`chkfmid ${csi} ${tgtzone} ${fmid}` 
		rc=$?
		if [ $minrc -gt 0 ]; then
			minrc=$rc
		fi
		if [ $rc -eq 0 ]; then 
			missingptfs=`chkptfs ${csi} ${tgtzone} ${fmid} ${reqptfs}`
			if [ $? -gt 0 ]; then
				if [ ${verbose} -gt 0 ]; then
					echo "chkptfs failed for ${tgtzone} ${fmid}" >&2
				fi
				continue
			else 
				if [ ${verbose} -gt 0 ]; then
					echo "ptfs missing in target zone: ${tgtzone} for fmid: ${fmid} <${missingptfs}>" >&2
				fi
			fi
			if [ "${missingptfs}" != "${reqptfs}" ]; then
				if [ ${verbose} -gt 0 ]; then
					if [ "${missingptfs}" != '' ]; then
						echo "chkptfs is missing ptfs ${missingptfs} from ${reqptfs} in ${tgtzone} ${fmid}" >&2
					fi
				fi
				break
			fi
		else 
			if [ ${verbose} -gt 0 ]; then
				echo "chkfmid returned with error code: $rc" >&2
			fi
			if [ $rc -gt 4 ]; then
				echo "${out}" >&2
			fi
		fi
	done

	if [ ${minrc} -gt 0 ]; then
		echo "FMID ${fmid} is not in any target zone in ${csi}" >&2
		return 16
	fi
	if [ "${missingptfs}" = '' ]; then
		if [ ${verbose} -gt 0 ]; then
			echo "All PTFs found in zone ${tgtzone}, fmid ${fmid}" >&2
		fi
	else
		echo "One or more required PTFs have not been applied to the target zones for FMID: ${fmid}" >&2
		echo "${tgtzones}" >&2
		echo "The required PTF list is: ${reqptfs}" >&2
		echo "The missing PTFs are: ${missingptfs}" >&2
		return 16
	fi
	if [ ${debug} -eq 0 ]; then
		rm ${tmpCntlHFS}
		rm ${gzonelist}
	fi
	return 0
}  

debug=0
verbose=0
opts=""
while getopts ":vdf" opt; do
  case ${opt} in
    d )
      debug=1
      opts="${opts} -d"
      ;;
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)
      if [ ${OPTARG} != "?" ]; then
	msg zospm ${InvalidOption} E "${OPTARG}"
      fi
      syntax
      exit 4
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -lt 2 ]; then
	msg zospm ${TooFewParms} E "$#"
	syntax
	exit 16
fi

. zospmsetenv

parms="$(echo ${*} | tr '[:lower:]' '[:upper:]')"
out=`runchk ${parms}`
rc=$?
if [ $rc -gt 0 ]; then
	echo "${out}" >&2
	exit $rc
fi
exit 0
