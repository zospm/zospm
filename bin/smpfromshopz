#!/bin/sh
InvalidOption=1
TooFewParms=2
UnknownAction=3

#
# Temporary hack - replace with a proper message file
#
msg() {
	pgm=$1
	msgnum=$2
	msgtype=$3
	
	shift 3
	args=$*

	case ${msgnum} in 
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few Parameters specified. Expected 2 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZPM000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
smpfromshopz [-vd] <prefix>
	    
Examples:
	smpfromshopz igy630 <-- Download SMP/E files for previouly ORDERed product IGY630 from ShopZ
" >&2 
	exit 16
}

receivefromnetwork() {
	sw="$1"

	setjavaenv

	tmpServerHFS=${ZOSPM_TMP}/$$.server.xml
	tmpClientHFS=${ZOSPM_TMP}/$$.client.xml
	tmpCntlHFS=${ZOSPM_TMP}/$$.cntl.xml

	cat >${tmpClientHFS} <<zzz
  <CLIENT debug="YES"                                  
     javahome="${SMPE_JAVAHOME}"                    
     classpath="${SMPE_CLASSPATH}"                 
     downloadmethod="https"                            
     downloadkeyring="javatruststore"                        
     javadebugoptions="-Dcom.ibm.smp.debug=severe">    
 </CLIENT>    
zzz

	cat >${tmpServerHFS} <<zzz
  <SERVER
  host="${SMPE_FTPHOST}"
  user="${SMPE_FTPUSER}"
  pw="${SMPE_FTPPW}"
  >
  <PACKAGE
  file="${SMPE_FTPFILE}"
  hash="${SMPE_FTPHASH}"
  id="${SMPE_FTPID}"
  >
  </PACKAGE>
  </SERVER>
zzz

	cat >${tmpCntlHFS} <<zzz
  SET BDY(GLOBAL).
    RECEIVE FROMNETWORK(
      SERVER(SERVER)
      CLIENT(CLIENT)
    )
      .
zzz

	NTS=${ZOSPM_TMP}/smpnts.${sw}

	mkdir -p ${NTS}

	smpout=`smp -i ${ZOSPM_SRC_HLQ}${sw}G.GLOBAL.CSI -w ${ZOSPM_TMP} -n ${NTS} -c ${tmpClientHFS} -s ${tmpServerHFS} <${tmpCntlHFS}`
	rc=$?
	if [ ${rc} -gt 0 ]; then
		echo "SMP/E RECEIVE of ${sw} failed." >&2
		echo "${smpout}" >&2
		echo "SMP/E RECEIVE INPUT Files have been retained: server:${tmpServerHFS} client:${tmpClientHFS} smpcntl:${tmpCntlHFS}" >&2
	else
		rm ${tmpOrderHFS} ${tmpClientHFS} ${tmpServerHFS} ${tmpCntlHFS}
	fi

	echo ${NTS}
	return ${rc} 
}

. zospmsetenv

debug=0
verbose=0
opts=""
while getopts ":vdf" opt; do
  case ${opt} in
    d )
      debug=1
      opts="${opts} -d"
      ;;
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)
      if [ ${OPTARG} != "?" ]; then
	msg smpfromnetwork ${InvalidOption} E "${OPTARG}"
      fi
      syntax
      exit 4
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -lt 1 ]; then
	msg smpfromnetwork ${TooFewParms} E "$#"
	syntax
	exit 16
fi


mydir=$(callerdir ${0})
ussname=$(echo ${1} | tr '[:upper:]' '[:lower:]'); 
zosname=$(echo ${1} | tr '[:lower:]' '[:upper:]'); 
props="${ZOSPM_WORKROOT}/order/${ussname}order.json"
zospmpropse "${ussname}" order "${props}"

out=`receivefromnetwork ${zosname}`; 
rc=$? 
if [ $rc -gt 0 ]; then
	echo "SMP/E FROM Network failed with return code $rc" >&2
else
	echo "${out}" 
fi

exit $rc
