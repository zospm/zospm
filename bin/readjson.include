/* REXX */

/*
 * readjson.include: This code provides a procedure called readJSON.
 * This file needs to be 'included' into the REXX code that wants to 
 * call readJSON because the procedure creates a stem variable (json)
 * with the parsed contents of the JSON file.
 * 
 * The input stream is read from stdin                         
 *
 * readjson expects valid JSON on input, with a root object
 * The stem variable is of the form:
 * json.<json-object>
 * where <json-object> may be a JSON string, number, object, array, boolean, or null
 *
 * An object is of the form:
 * object.0 = <number of keys>
 * object.<key> = <value>
 * for each key (or field) in the object. 
 * 
 * To enable the caller to walk all the fields of an object without knowing the key names, 
 * an extra entry called:
 * object.field.<i> = object.<key i>
 * for each key in the object.
 *
 * An array is of the form:
 * array.0 = <number of elements>
 * array.1.<json-object>
 * array.2.<json-object>
 * ... 
 *
 * For example, the JSON stream:
 * { "software": [{ "name":"ZHW110", "datasets": [{ "dsname":"SZHWSM" }, { "dsname":"AZHWSM" }] }] }
 * 
 * would return the json stem:
 * json.0 = 1
 * json.field.1 = SOFTWARE
 * json.SOFTWARE.0 = 1
 * json.SOFTWARE.1.0 = 2
 * json.SOFTWARE.1.field.1 = NAME
 * json.SOFTWARE.1.NAME = 'ZHW110'
 * json.SOFTWARE.1.field.2 = DATASETS
 * json.SOFTWARE.1.DATASETS.0 = 2
 * json.SOFTWARE.1.DATASETS.1.0 = 1
 * json.SOFTWARE.1.DATASETS.1.field.1 = DSNAME
 * json.SOFTWARE.1.DATASETS.1.DSNAME = 'SZHWSM'
 * json.SOFTWARE.1.DATASETS.2.0 = 1
 * json.SOFTWARE.1.DATASETS.2.field.1 = DSNAME
 * json.SOFTWARE.1.DATASETS.2.DSNAME = 'AZHWSM'
 */

/*
 * openJSON: Open up the JSON file, read it into a stream, and parse it
 */
openJSON:Procedure Expose parserHandle objectHandle HWTJ_OK
  Parse Arg parserHandle, objectHandle

  address hwtjson "hwtjinit ",
    "returnCode ",
    "parserHandle ",
    "diagArea."
  if (rc <> 0 | returnCode <> HWTJ_OK) then do
    call Error 'Internal Error: Unable to initialize HWT', diagArea.
    return 16
  end

  call syscalls 'ON'
  address syscall
  fd=0
  'read' fd 'stream' 16000000
  if retval=-1 then do
    call Error 'Internal Error: Unable to read stdin. Error codes' errno errnojr, diagArea.
    return 16
  end

  address hwtjson "hwtjpars ",
    "returnCode ",
    "parserHandle ",
    "stream ",
    "diagArea."
  parseRC=rc

  if (rc <> 0 | returnCode <> HWTJ_OK) then do
    call ImproveError data., line., diagArea.
    call Error 'JSON Input is invalid.', diagArea.
    call SayErr details.text
    call SayErr details.marker
    return 8
  end

  objectHandle=0
  return 0

transform:Procedure
  Parse arg name

  name=translate(name)
  name=translate(name,'_','-')
  return name

/*
 * read a single entry and update the stem with the value(s)
 * of the entry
 */
readJSONEntry:Procedure Expose json. opts. HWTJ_OK
  Parse arg stem, entryValueName, parserHandle, entryHandle, json

  entryName = stem || '.' || entryValueName

  address hwtjson "hwtjgjst",
    "returnCode",
    "parserHandle",
    "entryHandle",
    "entryValueType",
    "diagArea."

  if (rc <> 0 | returnCode <> HWTJ_OK) then do
    call Error 'Internal Error: Unable to retrieve type for entry: ' || stem || '.' || entryValueName, diagArea.
    return 16
  end

  rc=0
  returnCode = HWTJ_OK
  select
    when (entryValueType = 'HWTJ_ARRAY_TYPE') then do
      return readJSONArray(entryName, parserHandle, entryHandle, json)
    end
    when (entryValueType = 'HWTJ_OBJECT_TYPE') then do
      return readJSONObject(entryName, parserHandle, entryHandle, json)
    end
    when (entryValueType = 'HWTJ_NULL_TYPE') then do
      cmd = entryName || " = 'null'"
      if (opts.verbose) then do
        say cmd
      end
      INTERPRET cmd
    end
    otherwise do
      address hwtjson "hwtjgval",
        "returnCode",
        "parserHandle",
        "entryHandle",
        "entryValue",
        "diagArea."

      if (rc = 0 & returnCode = HWTJ_OK) then do
        cmd = entryName || " = '" || entryValue || "'"
        if (opts.verbose) then do
          say cmd
        end
        INTERPRET cmd
      end
    end
  end
  
  if (rc <> 0 | returnCode <> HWTJ_OK) then do
    call Error 'Unable to retrieve value for entry: ' || entryName, diagArea.
    return 16
  end
  return 0

/*
 * readJSONArray: given an array, get the number of entries, then call readJSONObject on 
 * each entry
 */
readJSONArray:Procedure Expose json. opts. HWTJ_OK
  Parse arg stem, parserHandle, arrayHandle, json

  address hwtjson "hwtjgnue ",
    "returnCode ",
    "parserHandle ",
    "arrayHandle ",
    "entries ",
    "diagArea."
  if (rc <> 0 | returnCode <> HWTJ_OK) then do
    call Error 'Internal Error: Unable to read number of array elements', diagArea.
    return 16
  end

  cmd = stem || '.0 = ' || entries
  if (opts.verbose) then do
    Say cmd
  End
  INTERPRET cmd

  do entry = 0 to entries-1
    address hwtjson "hwtjgaen ",
      "returnCode ",
      "parserHandle ",
      "arrayHandle ",
      "entry ",
      "resultHandle ",
      "diagArea."
    if (rc <> 0 | returnCode <> HWTJ_OK) then do
      call Error 'Internal Error: Unable to read array element: ' || entry , diagArea.
      return 16
    end
    elementHandle = resultHandle
    index=entry+1

    rc=readJSONEntry(stem, index, parserHandle, resultHandle, json)
    if (rc > 0) then do
      return rc
    end
  end

  return 0

/*
 * read a JSON object and update the stem with the fields
 * of the entry
 */
readJSONObject:Procedure Expose json. opts. HWTJ_OK
  Parse Arg stem, parserHandle, objectHandle, json
  
  returnCode = 0
  entryName = 0
  entryValueHandle = 0

  objectEntryIndex = 0
  rc = 0
  address hwtjson "hwtjgoen",
    "returnCode",
    "parserHandle",
    "objectHandle",
    "objectEntryIndex",
    "entryName",
    "entryValueHandle",
    "diagArea."
  if (rc <> 0 | returnCode <> HWTJ_OK) then do
    call Error 'Internal Error: Unable to retrieve root JSON json.', diagArea.
    return 16
  end
    
  address hwtjson "hwtjgnue",
    "returnCode",
    "parserHandle",
    "objectHandle",
    "numOfEntries",
    "diagArea."
  if (rc <> 0 | returnCode <> HWTJ_OK) then do
    call Error 'Internal Error: Unable to retrieve number of key/value pairs.', diagArea.
    return 16
  end
 
  cmd = stem || '.0 = ' || numOfEntries
  if (opts.verbose) then do
    Say cmd
  end 
  INTERPRET cmd

  do objectEntryIndex=0 to numOfEntries-1
    address hwtjson "hwtjgoen",
      "returnCode",
      "parserHandle",
      "objectHandle",
      "objectEntryIndex",
      "entryName",
      "entryValueHandle",
      "diagArea."

    if (rc <> 0 | returnCode <> HWTJ_OK) then do
      call Error 'Internal Error: Unable to retrieve key/value pair entry: ' || objectEntryIndex, diagArea.
      return 16
    end

    index = objectEntryIndex+1
    entryName = transform(entryName)
    cmd = stem || '.field.' || index || ' = ' || entryName
    if (opts.verbose) then do
      Say cmd
    end
    INTERPRET cmd

    rc = readJSONEntry(stem, entryName, parserHandle, entryValueHandle, json)
    if (rc <> 0) then do
      return rc
    end

  end
  return 0

CleanValue: Procedure
  Parse Arg text

  out=''
  do i = 1 to length(text)
    if (substr(text, i, 2) = '\"') then do
      out = out || '"'
      i=i+1
    end
    else do
      out = out || substr(text, i, 1)
    end
  end
  return out

SayErr: Procedure
  Parse Arg text
  data.1 = text
  data.0 = 1
  address mvs 'execio 1 diskw stderr (stem data.'
  return 0

ImproveError: Procedure Expose data. len. diagArea. details.
Parse Arg data, len, diagArea, details   

/*
 * Improve errors of the form: Expected comma between pairs in object at offset 395.
 * to be of the form: Expected comma between pairs in object on line X, column Y.
 */

  msg = diagArea.HWTJ_ReasonDesc
  Parse Value msg with 'Expected ' details ' in ' type ' at offset ' offset '.'

  if (details <> '' & offset <> '') then do
    line=1
    do l=1 to len.0
      if (len.l > offset) then do
        leave
      end
      line = line+1    
      offset = offset - len.l
    end
    col = offset+1
    diagArea.HWTJ_ReasonDesc = 'Expected:' details 'in' type 'at line:' line 'column:' col
    details.linenum = line
    details.column = col
    details.text = data.l
    pfx=''
    do i=1 to details.column
      c=substr(details.text, i, 1)
      if (c = '05'X) then do
        pfx = pfx || c
      end
      else do 
        pfx = pfx || ' '
      end
    end
    details.marker = pfx || '^'
  end
  return 0
  
Error: Procedure Expose diagArea. opts.
Parse Arg msg, diagArea
  call SayErr msg
  call SayErr diagArea.HWTJ_ReasonDesc
  return 0

/*
 * Read a JSON stream from stdin and set up the variable
 * json. to point to the underlying JSON object
 */
readJSON: Procedure Expose json. opts.
trace 'o'

/*
 * opts.verbose = 1 will print out what stem variables are set
 * TBD: turn this into a proper option
 */
  opts.verbose = 0

  call hwtcalls "on"
  address hwtjson "hwtConst ",
    "returnCode ",
    "diagArea."
  if (rc <> 0 | returnCode <> HWTJ_OK) then do
    call Error 'Internal Error: Unable to get HWTJSON constants', diagArea.
    return 16
  end

  rc = openJSON(parserHandle, objectHandle)
  if (rc <> 0) then do
    return rc
  end

  json. = 0
  object=''
  rc = readJSONObject('json', parserHandle, objectHandle, json)
  if (rc <> 0) then do
    return rc
  end
  return 0
