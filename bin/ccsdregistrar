#!/bin/sh
#set -x
InvalidOption=1
TooFewParms=2
TooFewEnableParms=3
UnknownAction=4

#
# Temporary hack - replace with a proper message file
#
msg() {
       	pgm=$1
	msgnum=$2
	msgtype=$3

	shift 3
	args=$*

	case ${msgnum} in
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected at least 2 but received: ";;
		${TooFewEnableParms}) msgtext="Too few parameters specified. Expected 3 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZPM000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
ccsdregistrar [-vd] <swname> enable|disable [<enablement text>]

Examples:
	Enable EQAE20 CCSD with SYSIN text \"...\" under GROUP EQA
		ccsdregistrar eqae20 enable \"...\"
	Disable EQAE20 CCSD from GROUP EQA
        	ccsdregistrar eqae20 disable
Note:
	The CCSD at \${ZOSPM_TGT_HLQ}CICS.DFHCSD will be updated with the new CCSD information under GROUP(<prefix>) and LIST(ZOSPM_DFH_GRPLIST)
		(where <prefix> is the first 3 letters of <swname>)
	Enabling a member that already has an entry is an error.
	Disabling a member that does not have an entry is silent.
" >&2
     	exit 8
}
	
opts=""         	
while getopts ":vdf" opt; do
  case ${opt} in
    d )   	
      debug=1
      opts="${opts} -d" 
      ;;                        
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)         
      if [ ${OPTARG} != "?" ]; then
        msg ccsdregistrar ${InvalidOption} E "${OPTARG}"
      fi                
      syntax
      exit 4
      ;;        
  esac  	
done    	
shift $(expr $OPTIND - 1 )
if [ $# -lt 2 ]; then
        msg ccsdregistrar ${TooFewParms} E "$#"
 	syntax
        exit 8
fi  
sw=$(echo $1 | tr '[:lower:]' '[:upper:]');
verb=$(echo $2 | tr '[:lower:]' '[:upper:]');
if [ "${verb}" = "CONFIG" ]; then
	verb="ENABLE"
fi
if [ "${verb}" = "DECONFIG" ]; then
	verb="DISABLE"
fi
text="$3"

prefix=`echo "${sw}" | awk '{ print substr($1, 0, 3) }'`

. zospmsetenv

list=${ZOSPM_DFH_GRPLIST}
args='PAGESIZE(9999)'

out=/tmp/dfhcsdup.$$.out
touch "${out}"
if [ "${verb}" = "ENABLE" ]; then
	mvscmd --pgm=DFHCSDUP --args="${args}" --steplib=${ZOSPM_DFHHLQ}.CICS.SDFHLOAD --dfhcsd=${ZOSPM_TGT_HLQ}CICS.DFHCSD --sysprint="${out}" --sysin=stdin <<zz
DELETE ALL GROUP(${prefix}) REMOVE
${text}
ADD GROUP(${prefix}) LIST(${list})
zz
rc=$?
else 
	mvscmd --pgm=DFHCSDUP --args="${args}" --steplib=${ZOSPM_DFHHLQ}.CICS.SDFHLOAD --dfhcsd=${ZOSPM_TGT_HLQ}CICS.DFHCSD --sysprint="${out}" --sysin=stdin <<zz
DELETE ALL GROUP(${prefix}) REMOVE
zz
rc=$?
fi

if [ $rc -gt 0 ]; then
	# Ignore DFH5510 warning message - since we are installing system services, they may begin with reserved letters like 'C'
	cat "${out}" | awk ' 
		{ if ((substr($1,0,3) == "DFH") && (($2 == "W") || ($2 != "I"))) { 
			if ($1 != "DFH5510" && $1 != "DFH5182" && $1 != "DFH5136") { 
				print $0 | "cat 1>&2"; exit 1; 
			}
		} 
	}' 
	if [ $? -eq 0 ]; then
		rc=0
	fi
	if [ $rc -gt 0 ]; then
		echo "ccsdregistrar: DFHCSDUP failed to ${verb} group ${prefix} in list ${list}" >&2
		echo "See ${out} for details" >&2
	fi
else
	rm -rf ${out}
fi

exit $rc
