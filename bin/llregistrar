#!/bin/sh
#set -x
InvalidOption=1
TooFewParms=2
TooFewEnableParms=3
UnknownAction=4

#
# Temporary hack - replace with a proper message file
#
msg() {
       	pgm=$1
	msgnum=$2
	msgtype=$3

	shift 3
	args=$*

	case ${msgnum} in
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few parameters specified. Expected at least 3 but received: ";;
		${TooFewEnableParms}) msgtext="Too few parameters specified. Expected 4 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZPM000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
llregistrar [-vd] <swname> enable|disable [dataset]+

Examples:
	Enable linklist and LLA entry for dataset ZOSPM.EQAE20.SEQABMOD
		llregistrar eqae20 enable zospm.eqae20.seqabmod
	Disable linklist and LLA entry for EQAE20 datasets
        	llregistrar eqae20 disable
Note:
	The PDS \${ZOSPM_ROOT}PARMLIB is created if it does not already exist
	The PDS member PROG\${ZOSPM_PARMLIB_SFX} is created if it does not already exist
	The PDS member will have the new link list datasets added if 'enable' is specified
	The PDS member will have the link list datasets removed if 'disable' is specified.
	Enabling a product that already has an entry is an error.
	Disabling a product that does not have an entry is silent.
	Disabling a product removes the entry from the file - it does NOT mark as DISABLED
" >&2
     	exit 8
}

opts=""         	
while getopts ":vdf" opt; do
  case ${opt} in
    d )   	
      debug=1
      opts="${opts} -d" 
      ;;                        
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)         
      if [ ${OPTARG} != "?" ]; then
        msg llregistrar ${InvalidOption} E "${OPTARG}"
      fi                
      syntax
      exit 4
      ;;        
  esac  	
done    	
shift $(expr $OPTIND - 1 )
if [ $# -lt 3 ]; then
        msg llregistrar ${TooFewParms} E "$#"
 	syntax
        exit 8
fi  

. zospmsetenv 

sw=$(echo $1 | tr '[:lower:]' '[:upper:]');
verb=$(echo $2 | tr '[:lower:]' '[:upper:]');
shift 2
datasets=$*

# There is no reliable way to determine the IPL link list
iplllname="${ZOSPM_IPLLLNAME}"
if `undefinedProperty "${iplllname}"`; then
	echo "llregistrar: ZOSPM_IPLLLNAME must be defined to use llregistrar" >&2
	exit 16
fi

pfx="/*"
sfx="*/"
header="${pfx} --- ${sw} LNKLST start --- ${sfx}"
footer="${pfx} --- ${sw} LNKLST end   --- ${sfx}"

parmlibds="${ZOSPM_TGT_HLQ}PARMLIB"
member="PROG${ZOSPM_PARMLIB_SFX}"

datasets=$(echo $datasets | tr '[:lower:]' '[:upper:]');
for dataset in ${datasets}; do
        info=`dls -l ${dataset}`
        if [ $? -gt 0 ]; then
        	echo "llregistrar: Dataset: ${dataset} not found." >&2
       		exit 16
        fi
done 

if [ "${verb}" = "DISABLE" ]; then
	registrar "${sw}" "DISABLE" "${parmlibds}" "${member}" "${header}" "${footer}" "${pfx}" "${sfx}"
	llaRemoveDatasets "${datasets}"
	if [ $? -gt 0 ]; then
		echo "llregistrar: Unable to remove ${datasets} from link list and LLA" >&2
		exit 16
	fi
	exit $?
fi

# ENABLE follows
llqs=''
#
# add new datasets
#
echo "Add datasets ${datasets}"
llaAddDatasets ${datasets}
if [ $? -gt 0 ]; then
	echo "llregistrar: Unable to add ${datasets} to dynamic linklist" >&2
	exit 16
fi

for dataset in ${datasets}; do
	llqs="${llqs} ${dataset##*.}"
	entry="LNKLST ADD NAME(${iplllname}) DSNAME(${dataset})"
	if [ "${text}" = "" ]; then
		text="${entry}"
	else
		text="${entry}
${text}"
	fi
done

#
# remove old datasets with the same llq as one of the new datasets
#
olddatasets=''
for lladataset in ${lladatasets}; do
	llq="${lladataset##*.}"
	isolddataset=true
	for newds in ${datasets}; do
		if [ "${newds}" = "${lladataset}" ]; then
			isolddataset=false
		fi
	done
	if ${isolddataset} ; then
		for newllq in ${llqs}; do
			if [ "${newllq}" = "${llq}" ]; then
				olddatasets="${olddatasets} ${lladataset}"
				entry="LNKLST DELETE NAME(${iplllname}) DSNAME(${lladataset})"
				if [ "${text}" = "" ]; then
					text="${entry}"
				else
					text="${entry}
${text}"
				fi
			fi
		done
	fi
done
if [ "${olddatasets}" != '' ]; then
	llaRemoveDatasets ${olddatasets}
fi
registrar "${sw}" "${verb}" "${parmlibds}" "${member}" "${header}" "${footer}" "${pfx}" "${sfx}" "${text}"

exit $?
