#!/bin/sh
#set -x
InvalidOption=1
TooFewParms=2
UnknownAction=3
InvalidWorkDir=4
WorkDirRequired=5
InvalidRepoDir=6
RepoDirRequired=7

#
# Temporary hack - replace with a proper message file
#
msg() {
	pgm=$1
	msgnum=$2
	msgtype=$3
	
	shift 3
	args=$*

	case ${msgnum} in 
		${InvalidOption}) msgtext="Invalid option specified: -";;
		${TooFewParms}) msgtext="Too few Parameters specified. Expected 2 but received: ";;
		${UnknownAction}) msgtext="Unknown action specified: ";;
		${InvalidWorkDir}) msgtext="Unknown working directory specified: ";;
		${WorkDirRequired}) msgtext="Working directory must be specified via -w option or through ZOSPM_WORKROOT ";;
		${InvalidRepoDir}) msgtext="Unknown respository directory specified: ";;
		${RepoDirRequired}) msgtext="Repository directory must be specified via ZOSPM_REPOROOT ";;
		*) msgtext="Internal Error. Unknow msgnum: ${msgnum}";;
	esac
	echo "ZPM000"${msgnum}${msgtype} "${msgtext}${args}" >&2
}

#
# Temporary hack - replace with a manpage
#
syntax() {
	echo "\
zospm [-cvdfrw] search|order|smpreceiveptf|install|update|receivezos|configure|deconfigure|uninstall <software>
	and <software> is the software to search for
	(Note that install invokes several functions which are: ${install_verbs})
	-c: clean files before processing (e.g. delete SMP/E CSI datasets) 
	-f: forces SMP/E processing to continue through apply checks and other processing when RC=4 
	-r function_name install: restart install at specific function (function_name must be one of: ${install_verbs})
	   If concatenating options and using -r it must be the last option..  (eg -cvr)
	-w workdir: specify the work directory zospm should use. 
	   The zospm work root directory can alternately be specified with ZOSPM_WORKROOT environment variable.

Note:
	zospm has files it needs to operate. You provide these files under the directory ZOSPM_WORKROOT (see the -w option)
	ZOSPM_WORKROOT has the following files and directories under it:
	props/zospmglobalprops.json:	Global properties used for installation and configuration of software packages
	props/<software>properties.json:Properties used for installation and configuration of the software package <software>
	order:				Directory of ORDER files describing how software package <software> can be installed
	pkg:				Directory of software packages to be installed from Passport Advantage
	config:				Directory containing generated scripts for configuration of software
	deconfig:			Directory containing generated scripts for de-configuration (removal) of software

	zospm looks for software package information in ZOSPM_REPOROOT. If not specified, ZOSPM_REPOROOT defaults to 
	the directory that zospm is installed into.

	zospm looks for PTFs when processing smpreceiveptf as follows:
		If the name specified starts with a '/', it is treated as an absolute zFS file name        
		Otherwise, if the name specified contains a '.', it is treated as an absolute sequential dataset or PDS member
		Otherwise the ptf <ptf> is searched for in: ZOSPM_HFS_ROOT/ptf/<sw>/<ptf>
		And finally, the ptf <ptf> is searched for in ZOSPM_HLQ.PTF.<sw>.<ptf>

Here is a sample order file for COBOL 6.3.0 you would create at \${ZOSPM_WORKROOT}/order/igy630order.json
{
   "software": [{
   "name":"IGY630",
   "order":{
     "SMPE_DELIVERY":"SHOPZ",
     "SMPE_FTPHOST":"deliverycb-mul.dhe.ibm.com",
     "SMPE_FTPUSER":"ABC12345",
     "SMPE_FTPPW":"XYZABC18949493E",
     "SMPE_FTPFILE":"2020011450035/PROD/GIMPAF.XML",
     "SMPE_FTPHASH":"75359EA9BEDC78CD4E37F574BFCA71AA31501AB0",
     "SMPE_FTPID":"STP55086"
     }
   }]
}

	    
zospm Examples:
	zospm search cobol     <-- search for products with COBOL in their description
	zospm order igy630     <-- submit an order for IGY630 software (receive can not be performed until complete)
	zospm refresh zospm    <-- refresh the zospm package manager from the server
	zospm refresh igy      <-- refresh the COBOL package definition from the server
	zospm install igy630   <-- check that all pre-reqs required for COBOL are satisfied, then SMP/E RECEIVE/APPLY/ACCEPT the product (with and w/o CHECK)
	zospm -w /zospm/workroot install igy630   <-- install COBOL compiler, specifying the zospm workroot directory as /zospm/workroot
	zospm -c -v install igy630   <-- do uninstall first and then verbose install
	zospm -r smpconfig install igy630   <-- restart install at the smpconfig step
	zospm -fr smpapplycheck install igy630   <-- restart install at the smpapplycheck step and ALLOW RC=4
	zospm update igy630 <-- apply all PTFs currently in receive status 
	zospm uninstall igy630 <-- remove all SMP/E datasets and product-specific datasets/filesystems
	zospm configure igy630 <-- run product-specific configuration after SMP/E APPLY step
	zospm deconfigure igy630 <-- run product-specific configuration removal after SMP/E APPLY step
	zospm smpreceiveptf igy630 ptf <-- receive a PTF from a sequential dataset, PDS member or zFS file
" >&2 
	exit 16
}

#
# Temporary hack - replace with call to IBM-managed server (ShopZ) to get proper list
#
search() {
	zospmlog "search" $*
	search=$1
	callerdir=`callerdir $0`
	grep -i "${search}" ${callerdir}/../zospm.software
	rc=$?
	zospmlog "search RC: ${rc}"
	return ${rc}
}

#
opts=$*
# Temporary hack - replace with proper RESTful call to ShopZ to submit request
# Response will be an ORDER number that, when complete, will have information needed  
# for the RECEIVE
#
order() {
	zospmlog "order" $*
	# currently no-op.
	if [ ${verbose} -gt 0 ]; then
		echo "order $1" >&2
	fi
	zospmlog "order RC: ${rc}"
	return 0
}

latestBinary() {
	binserver="$1"
	sw="$2"
	tmpa="${ZOSPM_TMP}/zospmpkgs_a.$$.txt"

	if [ "${sw}" = "zospm" ]; then
		binname='zospm'
	else
		binname="zospm-${sw}"
	fi

	httpsget -o "${tmpa}" "${binserver}/zospm"
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "There are no packages at: ${binserver}/zospm" >&2
		return $rc
	fi
	chtag -tc ISO8859-1 "${tmpa}"
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "Unable to tag ${binserver}/zospm package list at ${tmpa} as ISO8859-1" >&2
		return $rc
	fi
	line=`cat ${tmpa} | awk '/href=/ { print $3 }' | grep "${binname}" | tail -1`
	rc=$?
	rm "${tmpa}"
	if [ $rc -gt 0 ]; then
		echo "Unable to find any packages of name ${binname} from ${binserver}/zospm" >&2
		return $rc
	fi
	file="${line#*${binname}_*}"
	drop="${file%*.pax*}"
	echo "${drop}"
	return 0
}

updateInPlace() {
	sw="$1"
	zospmroot="$2"
	root="$3"
	gitserver="${ZOSPM_GITSERVER}"
	binserver="${ZOSPM_BINSERVER}"

	if [ -d "${root}" ]; then 
		# Directory exists, this is an 'update', not a 'create'
		repoaction="update"
		if [ -d "${root}/.git" ]; then
			# git directory exists: this is a git pull, not a bintray get 
			repotype="src"
		else
			repotype="bin"
		fi
	else 
		# Package does not exist yet. Look to zospmroot to determine if git or bintray
		repoaction="create"
		if [ -d "${zospmroot}/.git" ]; then
			repotype="src"
		else
			repotype="bin"
		fi
	fi 

	if [ "${repotype}" = "bin" ]; then
		drop=`latestBinary "${binserver}" "${sw}"`
		rc=$?
		if [ $rc -gt 0 ]; then
			return $rc
		fi
	fi	

	tmpscript="${ZOSPM_TMP}/$$.updateinplace.sh"
	cat >"${tmpscript}" <<'zz'
#!/bin/sh
#set -x
myself="$0"
sw="$1"
root="$2"
gitserver="$3"
binserver="$4"
repotype="$5"
repoaction="$6"
drop="$7"

if [ "${sw}" = "zospm" ]; then
	qualsw="zospm"
else
	qualsw="zospm-${sw}"
fi

if [ "${repoaction}" = "create" ]; then
	mkdir "${root}"
	rc=$?
	if [ $rc -gt 0 ]; then
		exit $rc
	fi
fi
cd "${root}"
rc=$?
if [ $rc -gt 0 ]; then
	exit $rc
fi

# Double check that we are really in a '$root' repo directory 
if [ "${root}" = '' ] || [ "${root}" = '/' ]; then
	echo "UpdateInPlace: The root directory is set to an unacceptable value: ${root}. No refresh performed." >&2
	exit 8
fi

if [ "${repotype}" = "src" ]; then
	if [ "${repoaction}" = "create" ]; then
		cd ../
		git clone "${gitserver}/${qualsw}.git"
		rc=$?
	else
		git pull "${gitserver}/${qualsw}.git"
		rc=$?
	fi
else
	if [ "${repoaction}" = "update" ]; then
		# Triple check that we are really in a valid '$root' binary repo by looking for zospm-<sw>.bom file
		readme="README.md"
		if ! [ -f "${readme}" ]; then
			echo "UpdateInPlace: The root directory ${root} does not contain the file ${readme} but a refresh was requested. No refresh performed." >&2
			exit 8
		fi
			
		rm -rf "${root}/*"
		rc=$?
		if [ $rc -gt 0 ]; then
			exit $rc
		fi
	fi
	paxfile="${ZOSPM_TMP}/${qualsw}_${drop}.pax"
	httpsget -o "${paxfile}" "${binserver}/zospm/${qualsw}_${drop}.pax"
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "Unable to find a binary package of ${qualsw} on ${binserver}" >&2
		exit $rc
	fi
	echo "Binary package: ${paxfile} downloaded from ${binserver}"
	pax -rf "${paxfile}"
	rc=$?
	if [ $rc -gt 0 ]; then
		exit $rc
	fi
	rm "${paxfile}"
	rc=$?
	if [ $rc -gt 0 ]; then
		exit $rc
	fi
fi

rm "${myself}"
exit $rc 
zz
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "Unable to create temporary script ${tmpscript} to refresh ${sw}" >&2
		exit $rc
	fi	
	chmod u+x "${tmpscript}"
	rc=$?
	if [ $rc -gt 0 ]; then
		echo "Unable to maketemporary script ${tmpscript} to refresh ${sw} executable" >&2
		exit $rc
	fi	
	"${tmpscript}" "${sw}" "${root}" "${gitserver}" "${binserver}" "${repotype}" "${repoaction}" "${drop}" 

	# Have an 'exit' here because this code may have now been updated beneath our feet (with zospm refresh)
	exit $?
}

refresh() {
	sw=$(echo $1 | tr '[:upper:]' '[:lower:]');
	zospmlog "refresh $sw"

	if [ ${verbose} -gt 0 ]; then
		echo "refresh $sw" >&2
	fi
	callerdir=`callerdir $0`
	zospmroot="${callerdir}/.."
	if [ "${sw}" = "zospm" ]; then
		root="${ZOSPM_REPOROOT}/zospm"
	else
		root="${ZOSPM_REPOROOT}/zospm-${sw}"
	fi
	updateInPlace "${sw}" "${zospmroot}" "${root}" 
}

receive() {
	props="${ZOSPM_WORKROOT}/order/${ussname}order.json"
	zospmpropse "${ussname}" order "${props}"
		
	if [ ${verbose} -gt 0 ]; then
		echo "Performing SMP/E Receive $*" >&2
	fi      
	case ${SMPE_DELIVERY} in
		SHOPZ)
			zospmlog "Receiving from ShopZ for: "${sw}
			out=`smpfromshopz ${opts} ${sw}`
			rc=$?
			;;
		PPA)
			zospmlog "Receiving from PPA for: "${sw}
			out=`smpfromppa ${opts} ${sw}`
			rc=$?
			if [ ${rc} -eq 0 ]; then
				out=`smpfromnts ${opts} ${sw}`
				rc=$?
			fi	
			;;
		LOCAL)
			zospmlog "Receiving from LOCAL NTS for: "${sw}
			out=`smpfromnts ${opts} ${sw}`
			rc=$?
			;;
		*)
			echo "SMPE_DELIVERY must be one of SHOPZ, PPA, LOCAL and must be specified in your ORDER file" >&2
			rc=16
			;;
	esac
	return $rc
}

prodreq() {
	zospmlog "prodreq" $*
		
	tmp_frspace=$(df -k ${ZOSPM_TMP} | tail -1 | awk '{print $3}' | awk -F'/' '{print $1}')
	if [ "${tmp_frspace}" -lt "${ZOSPM_TMP_MINSPACE}" ]; then
		zfstmpinf=`df -kP ${ZOSPM_TMP} | awk '!/Filesystem/ {print $1,$2,$4}'`
		arinx=0
		for words in ${zfstmpinf}; do
		        zfsparm[$arinx]=${words}
		        arinx=`expr ${arinx} + 1`
		done
		zfstmpnm=${zfsparm[0]}
		zfstmpts=${zfsparm[1]}
		zfstmpas=${zfsparm[2]}
		newsize=`expr ${ZOSPM_TMP_MINSPACE} - ${zfstmpas} + ${zfstmpts}`
		resizezfs=`zfsadm grow -aggregate "$zfstmpnm" -s "${newsize}"`
		rc=$?
		if [ "${rc}" != "0" ]; then
			echo "Warning, ${ZOSPM_TMP} is low on free space, it is recommended to have at least ${ZOSPM_TMP_MINSPACE} KB available" >&2
			echo "Current free space available is: ${tmp_frspace} KB" >&2
		        echo "zospm Failed to automatically extend zfs ${zfstmpnm} to new size: ${newsize}. Return code: ${rc}" >&2
			rc=16		
		fi
		return ${rc}
	fi
        
	ussname=$(echo ${sw} | tr '[:upper:]' '[:lower:]');
	prefix=`echo ${ussname} | awk '{print substr($0,0,3)}'`
	if [ ${verbose} -gt 0 ]; then
		echo "Checking requisites ${opts} ${sw}" >&2
	fi
	SWDIR="${ZOSPM_REPOROOT}/zospm-${prefix}/${ussname}/"
	json="${SWDIR}${ussname}req.json"
	if [ -f "${json}" ]; then
		smpchkreq ${opts} ${ussname} ${json}
		return $?
	else
		echo "Unable to find product requisite JSON file: ${json}. Installation failed." >&2
		return 16
	fi
}

update() {
	export ALLPTFS=1
	baseopts="${opts}"
	for zospmfunc in ${update_verbs}; do
		opts="${baseopts}"
		runfunc="${zospmfunc}"
                if [ "${runfunc}" = "smpapplycheck" ]; then
                        opts="$opts -p -t"
                        runfunc="smpappacc"
                fi
                if [ "${runfunc}" = "smpapply" ]; then
                        opts="$opts -q -t"
                        runfunc="smpappacc"
                fi
                out=`${runfunc} ${opts} ${sw}`
                rc=$?
		zospmlog "${runfunc} ${opts}" $*
                zospmlog "${runfunc} RC: ${rc}"
                if [ "$rc" -gt 0 ] || [ "$verbose" -gt 0 ]; then
                        echo "${out}" >&2
                fi
                if [ "$rc" -gt 0 ]; then
                        return $rc
                fi
        done
        return $rc
	unset ALLPTFS	
}



install() {
	export ALLPTFS=0
	zospmlog "install" $*
	baseopts="$opts"
	for zospmfunc in ${install_verbs}; do
		opts="${baseopts}"
		runfunc="${zospmfunc}"
		if [ "${runfunc}" = "smpapplycheck" ]; then
			opts="$baseopts -p"
			runfunc="smpappacc"
		fi
		if [ "${runfunc}" = "smpapply" ]; then
			opts="$baseopts -q"
                        runfunc="smpappacc"
		fi
                if [ "${runfunc}" = "smpacceptcheck" ]; then
			opts="$baseopts -r"
                        runfunc="smpappacc"
                fi
                if [ "${runfunc}" = "smpaccept" ]; then
			opts="$baseopts -s"
                        runfunc="smpappacc"
                fi
                if [ "${runfunc}" = "zospmarchive" ]; then
			opts=""
                fi

		if [ "${restart}" != "NORESTART" ]; then
			if [ "${zospmfunc}" != "${restart}" ]; then
				continue
			else
				restart="NORESTART"
			fi
		fi
		out=`${runfunc} ${opts} ${sw}`
		rc=$?
		zospmlog "${runfunc} RC: ${rc}"
		if [ "$rc" -gt 0 ] || [ "$verbose" -gt 0 ]; then
			echo "${out}" >&2
		fi
		if [ "$rc" -gt 0 ]; then
			return $rc
		fi
	done	
	return $rc
}

configure() {
	zospmlog "configure" $*

        ussname=$(echo ${sw} | tr '[:upper:]' '[:lower:]');
        zosname=$(echo ${sw} | tr '[:lower:]' '[:upper:]');
	prefix=`echo ${ussname} | awk '{print substr($0,0,3)}'`
        if [ ${verbose} -gt 0 ]; then
	        echo "configure ${opts} ${sw}" >&2
	fi

	dls "${ZOSPM_TGT_HLQ}${zosname}.*" >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo "Datasets of pattern: ${ZOSPM_TGT_HLQ}${zosname}.* already exist. Configuration aborted." >&2
		return 16
	fi 
	prodconfig="${ZOSPM_REPOROOT}/zospm-${prefix}/${ussname}/${ussname}config"
        if ! [ -f "${prodconfig}" ]; then
		echo "Unable to find product configuration program: ${prodconfig} for ${ussname}. Configure failed." >&2
		zospmlog "configure RC: 16"
                return 16               
	fi
	
	archive="${ZOSPM_TMP}/${ussname}.dzp"	
	if ! [ -f "${archive}" ]; then
		echo "Unable to find product installation archive: ${archive}" >&2
		zospmlog "configure RC: 16"
                return 16               
	fi
	zospmrestore "${ussname}" 
	rc=$?
	if  [ $rc -gt 0 ]; then
		echo "Unable to restore product installation archive: ${archive}" >&2
		zospmlog "configure RC: $rc"
                return $rc               
	fi
	
	${prodconfig} ${opts}
	rc=$?
	zospmlog "configure RC: $rc"
	return $rc
}

deconfigure() {
	zospmlog "deconfigure" $*

        ussname=$(echo ${sw} | tr '[:upper:]' '[:lower:]');
        zosname=$(echo ${sw} | tr '[:lower:]' '[:upper:]');
	prefix=`echo ${ussname} | awk '{print substr($0,0,3)}'`
        if [ ${verbose} -gt 0 ]; then
	        echo "deconfigure ${opts} ${sw}" >&2
	fi

	proddeconfig="${ZOSPM_REPOROOT}/zospm-${prefix}/${ussname}/${ussname}deconfig"
        if [ -f "${proddeconfig}" ]; then
     	        ${proddeconfig} ${opts}
		rc=$?
		if [ $rc -gt 0 ]; then
			zospmlog "deconfigure RC: $?"
			return $rc
	 	fi
	else 
		echo "Error: unable to find ${proddeconfig} to deconfigure ${ussname}. Deconfigure failed." >&2
		zospmlog "deconfigure RC: 8"
		return 8
	fi
	if [ "${ZOSPM_TGT_HLQ}" != "${ZOSPM_TGT_HLQ%.*}" ]; then
		zospmmount -u -t $sw
		drm -f "${ZOSPM_TGT_HLQ}${zosname}*.**"
	fi
	zospmlog "deconfigure RC: $?"
	return $?
}

install_verbs="smpprodreq smpconfig smpreceive smpcrdddef proddsalloc smpapplycheck smpapply smpacceptcheck smpaccept zospmarchive"
update_verbs="smpapplycheck smpapply zospmarchive"

debug=0
verbose=0
clean=0
force=0
restart="NORESTART"
opts=""
workdir=''
while getopts ":cvdqfr:w:" opt; do
  case ${opt} in
    d )
      debug=1
      opts="${opts} -d"
      ;;
    f )
      force=1
      opts="${opts} -f"
      ;;
    r )
      restart=${OPTARG}
      rescheck='notok'
      for testarg in ${install_verbs}; do
	if [ "${restart}" = "${testarg}" ]; then
		rescheck='ok'
		break
        fi
      done
      if [ "${rescheck}" = 'notok' ]; then
      	msg zospm ${InvalidOption} E "${OPTARG}"
	exit 4
      fi
      ;;
    w )
      workdir=${OPTARG}
      if ! [ -d "${workdir}" ]; then
      	msg zospm ${InvalidWorkDir} E "${OPTARG}"
	exit 8
      fi
      ;;
    c )
      clean=1
      ;;
    q )
      quiet=1
      opts="${opts} -q"
      ;;
    v )
      verbose=1
      opts="${opts} -v"
      ;;
    \?)
      if [ ${OPTARG} != "?" ]; then
	msg zospm ${InvalidOption} E "${OPTARG}"
      fi
      syntax
      exit 8
      ;;
  esac
done
shift $(expr $OPTIND - 1 )
if [ $# -lt 2 ]; then
	msg zospm ${TooFewParms} E "$#"
	syntax
	exit 16
fi

if [ "${workdir}" = '' ]; then
	workdir="${ZOSPM_WORKROOT}"
fi
if [ "${workdir}" = '' ]; then
	msg zospm ${WorkDirRequired} E 
	exit 8
fi
if ! [ -d "${workdir}" ]; then
	msg zospm ${InvalidWorkDir} E "${OPTARG}"
	exit 4
fi

export ZOSPM_WORKROOT="${workdir}"

#
# Confirm that the PATH includes zospm (and therefore the other tools like zospmsetenv)
#
whence zospm >/dev/null 2>&1
rc=$?
if [ $rc -gt 0 ]; then
	echo "zospm requires that your PATH include the 'bin' directory for zospm - do not try to invoke zospm directly" >&2
	exit $rc
fi

. zospmsetenv

sw=$2
ussname=$(echo ${sw} | tr '[:upper:]' '[:lower:]');
zosname=$(echo ${sw} | tr '[:lower:]' '[:upper:]');
file="$3"

# Check the version of zoautils is recent enough
zoaversion=`zoaversion`
if [ $? -gt 0 ]; then
	echo "Z Open Automation Utilities (ZOAU) is not in your PATH. ZOAU is required to use zospm." >&2
	exit 16
fi
year=${zoaversion%%/*}
yearmonth=${zoaversion%/*}
month=${yearmonth##*/}
if [ $year -lt 2020 ] || [ $month -lt 3 ]; then
	echo "Z Open Automation Utilities 2020/03/01 or later is required to run zospm. Your utilities are too old: ${zoaversion}" >&2
	exit 16
fi
if [ "${ZOSPM_REPOROOT}" = '' ]; then
	msg zospm ${RepoDirRequired} E 
	exit 8
fi
if ! [ -d "${ZOSPM_REPOROOT}" ]; then
	msg zospm ${InvalidRepoDir} E "${ZOSPM_REPOROOT}"
	exit 4
fi

if [ "${clean}" = "1" ]; then
	prefix=`echo "${ussname}" | awk '{ print substr($1, 0, 3) }'`
	bomfile="${ZOSPM_REPOROOT}/zospm-${prefix}/${ussname}/${ussname}bom.json"
	swparent=`readparent ${ussname} <${bomfile}`
	rc=$?
	if [ $rc -gt 0 ]; then
        	echo "$swparent"
        	exit $rc
	fi

	if [ "$swparent" != "0" ]; then
        	echo "Warning: Product $zosname is installed into the SMP/E zone for $swparent" >&2
        	echo "Using the -c option is invalid under these conditions" >&2
        	echo " " >&2
        	echo "If you need to install $zosname, then remove the -c option" >&2
        	echo " " >&2
        	echo "If you need to RE-install $zosname, then manual actions may be required for $swparent" >&2
        	echo "to clean up SMP/E or alternatively you will need to first uninstall and reinstall $swparent" >&2
        	echo " " >&2
        	echo "If you really wish to uninstal $zosname then run zospm uninstall $zosname" >&2
		exit 16
	fi

	out=`prodclean ${opts} ${sw}`
	
	rc=$?
	zospmlog "Cleanup for ${sw} Return Code: ${rc}"
	if [ "${verbose}" = "1" ]; then
		echo "Cleanup completed: ${rc}" >&2
	fi
	if [ $rc -gt 0 ]; then
		echo "Cleanup failed with Return code: ${rc}" >&2
		echo "${out}"
		exit ${rc}
	fi

fi
verb=$1

case ${verb} in
	search ) 
		out=`search $2`  
		rc=$?  
		echo "${out}" | tr '_' ' '
		;;
	refresh ) 
		refresh $2  
		rc=$?  
		;;
	order ) 
		out=`order ${opts} $2`  
		rc=$?  
		echo "${out}"
		;;
	smpconfig )
		if [ ${verbose} -gt 0 ]; then
			echo "Allocate SMP/E datasets for $2 " >&2
		fi
		out=`smpconfig ${opts} ${sw}`
		rc=$?
		if [ $rc -gt 0 ]; then
			echo "Unable to configure SMP/E datasets." >&2
			echo "${out}" >&2
			exit $rc
		fi
		;;
	smpreceive )
		out=`receive ${opts} ${sw}`; 
		rc=$? 
		if [ $rc -gt 0 ]; then
			echo "${out}" >&2
			exit $rc
		fi
		;;
        smpreceiveptf )
                out=`smpfromfile ${opts} ${sw} ${file}`;
                rc=$?
                if [ $rc -gt 0 ]; then
                        echo "${out}" >&2
                        exit $rc
                fi
                ;;
	smpprodreq )
		out=`prodreq ${opts} ${sw}`

		rc=$?
		if [ $verbose -gt 0 ]; then
			echo ${out} >&2
		fi 
		if [ $rc -gt 0 ]; then
			echo "${out}"  >&2
			exit $rc
		fi
		;;
	smpcrdddef )
		out=`smpcrdddef ${opts} ${sw}`
		rc=$?
		if [ $rc -gt 0 ]; then
                        echo "${out}" >&2
                        exit $rc
                fi
                ;;
	proddsalloc )
		out=`proddsalloc ${opts} ${sw}`
		rc=$?
		if [ $rc -gt 0 ]; then
			echo "${out}" >&2
			exit $rc
		fi
		;;
	smpapplycheck )
		opts="${opts} -p"
		out=`smpappacc ${opts} ${sw}`
		rc=$?
		if [ $rc -gt 0 ] || [ $verbose -gt 0 ]; then
                        echo "${out}" >&2
                        exit $rc
                fi
                ;;
	smpapply )
		opts="${opts} -q"
		out=`smpappacc ${opts} ${sw}`
		rc=$? 
		if [ $rc -gt 0 ] || [ $verbose -gt 0 ]; then
			echo "${out}" >&2
			exit $rc
		fi
		;;
        smpacceptcheck )
		opts="${opts} -r"
                out=`smpappacc ${opts} ${sw}`
                rc=$?
                if [ $rc -gt 0 ] || [ $verbose -gt 0 ]; then
                        echo "${out}" >&2
                        exit $rc
                fi
                ;;
        smpaccept )
		opts="${opts} -s"
                out=`smpappacc ${opts} ${sw}`;
                rc=$?
                if [ $rc -gt 0 ] || [ $verbose -gt 0 ]; then
                        echo "${out}" >&2
                        exit $rc
                fi
                ;;
        archive )
                out=`zospmarchive ${sw}`;
                rc=$?
                if [ $rc -gt 0 ] || [ $verbose -gt 0 ]; then
                        echo "${out}" >&2
                        exit $rc
                fi
                ;;
	install )
		out=`install ${opts} ${sw}`
		rc=$? 
		if [ $rc -gt 0 ] || [ $verbose -gt 0 ]; then
			echo "${out}"  >&2
			exit $rc
		fi
		;;
        update  )
                out=`update ${opts} ${sw}`
                rc=$?
                if [ $rc -gt 0 ] || [ $verbose -gt 0 ]; then
                        echo "${out}" >&2
                        exit $rc
                fi
                ;;
	configure ) 
		configure ${opts} ${sw}
		rc=$?
		;;	
	deconfigure ) 
		deconfigure ${opts} ${sw}
		rc=$?
		;;	
	uninstall ) 
		out=`prodclean ${opts} ${sw}`
		rc=$?
		zospmlog "Uninstall ${sw} Return Code: ${rc}"
		if [ "${verbose}" = "1" ]; then
			echo "Uninstall completed: ${rc}" >&2
		fi
                if [ $rc -gt 0 ]; then
                        echo "${out}" >&2
                fi
		
		;;	
	* ) msg zospm ${UnknownAction} E ${verb}; exit 16;;
esac

exit $rc
