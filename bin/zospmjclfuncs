#
# gets called by zospmexternalfuncs
#

jclRemoveAddOrReplaceDD() {
	jverb="$1"
	jcl="$2"
	step="$3"
	dd="$4"

	if [ "${jverb}" = "ADD" ] || [ "${jverb}" = "REPLACE" ] ; then
		dataset="$5"
	fi

#
# Extract the contents of the STEP ${step} into stepText 
#
	start=`echo "${jcl}" | awk -vstep=$step ' /\/\/[A-Z0-9\$#@]+[ ]+EXEC / { if (substr($1,3) == step) { print NR; exit 0 }}'`
	if [ "${start}" = '' ]; then
		echo "No step named ${step} found in JCL." >&2
		return 4
	fi
	startM1=`expr $start - 1`
	rest=`echo "${jcl}" | tail +${start}`
	end=`echo "${rest}" | tail +2 | awk ' /\/\/[A-Z0-9\$#@]+[ ]+EXEC / { print NR; exit 0 }'`

	if [ "${end}" = '' ]; then
		end=`echo "${rest}" | wc -l`
		end=`expr $end + 1` # because the end is one line after the end of the file
		afterStep=''
	else
		end=`expr $end + 1` # because end did not include the first line
		afterStep=`echo "${rest}" | tail +${end}`
	fi

	endM1=`expr $end - 1`
	stepText=`echo "${rest}" | head -n ${endM1}`
	if [ ${start} -gt 1 ]; then
		beforeStep=`echo "${jcl}" | head -n ${startM1}`
	else
		beforeStep=''
	fi

#
# Extract the DDName from the step
#
	start=`echo "${stepText}" | awk -vdd=$dd ' /\/\/[A-Z0-9\$#@]+[ ]+/ { if (substr($1,3) == dd) { print NR; exit 0 }}'`
	if [ "${start}" = '' ]; then
		#
		# If DDName was not there, add it to the end of the step, if operation was not 'REMOVE'
		echo "${beforeStep}"
		echo "${stepText}"
		if [ "${jverb}" != "REMOVE" ]; then
			echo "//${dd} DD DSN=${dataset},DISP=SHR"
		fi
		echo "${afterStep}"
		return 0
	fi
	startM1=`expr $start - 1`
	rest=`echo "${stepText}" | tail +${start}`
	end=`echo "${rest}" | tail +2 | awk ' /\/\/[A-Z0-9\$#@]+[ ]+/ { print NR; exit 0 }'`

	if [ "${end}" = '' ]; then
		end=`echo "${rest}" | wc -l`
		end=`expr $end + 1` # because the end is one line after the end of the file
		afterDD=''
	else
		end=`expr $end + 1` # because end did not include the first line 
		afterDD=`echo "${rest}" | tail +${end}`
	fi

	endM1=`expr $end - 1`
	if [ ${start} -gt 1 ]; then
		beforeDD=`echo "${stepText}" | head -n ${startM1}`
	else
		beforeDD=''
	fi

#	echo "Before Step:"
	if [ "${beforeStep}" != '' ]; then		
		echo "${beforeStep}"
	fi
#	echo "Before DD:"
	if [ "${beforeDD}" != '' ]; then		
		echo "${beforeDD}"
	fi

	if [ "${jverb}" = "ADD" ]; then
		ddText=`echo "${rest}" | head -n ${endM1}`
		#
		# Add the new dataset to the TOP of the DDName concatenation
		# MSF - make this prettier by putting the right number of spaces after the //
		#
		ddlen=`echo "//$dd" | wc -c | xargs echo` # length includes 'new line' 
		secondLineDDText=`echo "${rest}" | head -1 | cut -c ${ddlen}-80`

		#	echo "DD:"
		echo "//${dd} DD DSN=${dataset},DISP=SHR"
		echo "//${secondLineDDText}"
		echo "${ddText}" | tail +2	
	elif [ "${jverb}" = "REPLACE" ]; then
		echo "//${dd} DD DSN=${dataset},DISP=SHR"
	fi

#	echo "After DD:"
	if [ "${afterDD}" != '' ]; then		
		echo "${afterDD}"
	fi
#	echo "After Step:"
	if [ "${afterStep}" != '' ]; then		
		echo "${afterStep}"
	fi
	return 0
}

jclAddDatasetToDD() {
	jclRemoveAddOrReplaceDD "ADD" "$1" "$2" "$3" "$4"
	return $?
}

jclRemoveDD() {
	jclRemoveAddOrReplaceDD "REMOVE" "$1" "$2" "$3" 
	return $?
}

jclReplaceDD() {
	jclRemoveAddOrReplaceDD "REPLACE" "$1" "$2" "$3" "$4"
	return $?
}
